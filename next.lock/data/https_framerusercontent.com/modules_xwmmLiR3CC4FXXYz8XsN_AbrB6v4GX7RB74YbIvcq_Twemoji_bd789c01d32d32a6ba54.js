import twemoji from "https://jspm.dev/twemoji@13.0.2"; import * as React from "react"; import { useMemo , useCallback } from "react"; import { addPropertyControls , ControlType } from "framer"; export function Twemoji (props) { const { search, isSelection, selection } = props; const emoji = isSelection ? selection : !search || search.length > 2 ? "⭐️" : search; const dummyDiv = useMemo(() => { return document.createElement("div"); }, []); const starTwemojiSrc = useMemo(() => { dummyDiv.textContent = "⭐️"; twemoji.parse(dummyDiv, {ext: ".svg", folder: "svg"}); return dummyDiv.querySelector("img").src; }, []); const parse = useCallback((string) => { var ref; dummyDiv.textContent = string; twemoji.parse(dummyDiv, {ext: ".svg", folder: "svg"}); return ((ref = dummyDiv.querySelector("img")) === null || ref === void 0 ? void 0 : ref.src) ? dummyDiv.querySelector("img").src : starTwemojiSrc; }, []); const twemojiSrc = useMemo(() => { return parse(emoji); }, [emoji]); return React.createElement("div", {style}, React.createElement("img", {src: twemojiSrc, style: {width: "100%", height: "100%"}})); }; Twemoji.defaultProps = {width: 100, height: 100, search: "⭐️"}; addPropertyControls(Twemoji, {isSelection: {type: ControlType.Boolean, title: "Select", enabledTitle: "Preset", disabledTitle: "Search"}, selection: {type: ControlType.Enum, title: " ", options: ["🔥", "💖", "😆", "👍", "👎"], defaultValue: "🔥", displaySegmentedControl: true, hidden: ({ isSelection }) => { return !isSelection; }}, search: {type: ControlType.String, title: " ", placeholder: "Paste Emoji…", hidden: ({ isSelection }) => { return isSelection; }}}); const style = {height: "100%", width: "100%", display: "flex", placeItems: "center", placeContent: "center", textAlign: "center", backgroundColor: "transparent"}; export const __FramerMetadata__ = {exports: {Twemoji: {type: "reactComponent", slots: [], annotations: {framerIntrinsicWidth: "100", framerSupportedLayoutWidth: "fixed", framerIntrinsicHeight: "100", framerSupportedLayoutHeight: "fixed"}}}}; 